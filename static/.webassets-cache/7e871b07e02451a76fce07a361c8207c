Vvar Chart, Dashboard, activateListeners, all, averageValues, avgTempByMonth, cal, chart, checkAvg, dataSlice, dateDim, dayOfWeek, db, deltaPrcnts, hourChart, monthChart, monthDim, monthNameDim, ndx, orderByAvg, parseDate, seasonChart, seasonDim, startTime, timeChart, timeSeries, yearChart;\u000a\u000andx = null;\u000a\u000aall = null;\u000a\u000adateDim = null;\u000a\u000adayOfWeek = null;\u000a\u000aavgTempByMonth = null;\u000a\u000adataSlice = null;\u000a\u000achart = null;\u000a\u000amonthNameDim = null;\u000a\u000amonthDim = null;\u000a\u000aseasonDim = null;\u000a\u000atimeChart = null;\u000a\u000aseasonChart = null;\u000a\u000aall = null;\u000a\u000adb = null;\u000a\u000acal = null;\u000a\u000astartTime = new Date();\u000a\u000a(function($) {})(jQuery);\u000a\u000aparseDate = d3.time.format("%Y-%m-%d %H:%M:%S").parse;\u000a\u000ad3.csv("static/aggedWeather.csv", function(data) {\u000a  db = new Dashboard();\u000a  db.parseData(data);\u000a  dc.renderAll();\u000a  dataSlice = data[0];\u000a  console.log(dataSlice);\u000a  return console.log((new Date() - startTime) / 1000);\u000a});\u000a\u000atimeSeries = function(dim, metricName, displayName, metric) {\u000a  var maxDate, metric_avg, minDate, width;\u000a  timeChart = dc.compositeChart("#timeSeries .chart");\u000a  metric_avg = averageValues(dim, metricName + "_avg");\u000a  minDate = dim.bottom(1)[0].Date;\u000a  maxDate = dim.top(1)[0].Date;\u000a  width = $(timeChart.root()[0]).innerWidth() + 30;\u000a  timeChart.width(width).height(width * .333).dimension(dim).renderHorizontalGridLines(true).x(d3.time.scale().domain([minDate, maxDate])).xUnits(d3.time.months).elasticY(true).elasticX(true).brushOn(true).legend(dc.legend().x(60).y(10).itemHeight(13).gap(5)).yAxisLabel(displayName).compose([\u000a    dc.lineChart(timeChart).colors(['red']).group(metric, displayName).valueAccessor(function(d) {\u000a      return d.value.avg;\u000a    }).interpolate('basis-open').dimension(dim), dc.lineChart(timeChart).dimension(dim).colors(['blue']).group(metric_avg, "Average " + displayName).valueAccessor(function(d) {\u000a      return d.value.avg;\u000a    }).interpolate('basis-open')\u000a  ]);\u000a  return timeChart;\u000a};\u000a\u000amonthChart = function(dim, metricName, displayName, metric) {\u000a  var chartObject, monthArray, width;\u000a  chartObject = dc.barChart("#monthChart");\u000a  width = $(chartObject.root()[0]).outerWidth() + 100;\u000a  monthArray = ["Jan", "Feb", "Mar", "Apr", "May", "June", "July", "Aug", "Sept", "Oct", "Nov", "Dec"];\u000a  chartObject.width(width).height(width * .4).dimension(dim).group(metric).elasticY(true).yAxisLabel(displayName).x(d3.scale.ordinal().domain(monthArray)).xUnits(dc.units.ordinal).valueAccessor(function(d) {\u000a    return d.value.avg;\u000a  }).centerBar(false).renderHorizontalGridLines(true);\u000a  return chartObject;\u000a};\u000a\u000ayearChart = function(dim, metricName, displayName, metric) {\u000a  var chartObject, width;\u000a  chartObject = dc.barChart("#yearChart");\u000a  width = $(chartObject.root()[0]).outerWidth() + 100;\u000a  chartObject.width(width).height(width * .4).dimension(dim).group(metric).elasticY(true).yAxisLabel(displayName).brushOn(true).round(dc.round.floor).x(d3.scale.ordinal()).xUnits(dc.units.ordinal).valueAccessor(function(d) {\u000a    return d.value.avg;\u000a  }).centerBar(false).renderHorizontalGridLines(true);\u000a  return chartObject;\u000a};\u000a\u000ahourChart = function(dim, metricName, displayName, metric) {\u000a  var chartObject, width;\u000a  chartObject = dc.barChart("#hourChart");\u000a  width = $(chartObject.root()[0]).outerWidth() + 100;\u000a  chartObject.width(width).height(width * .4).dimension(dim).group(metric).elasticY(true).yAxisLabel(displayName).brushOn(true).round(dc.round.floor).x(d3.scale.ordinal()).xUnits(dc.units.ordinal).valueAccessor(function(d) {\u000a    return d.value.avg;\u000a  }).centerBar(false).renderHorizontalGridLines(true);\u000a  return chartObject;\u000a};\u000a\u000aaverageValues = function(dim, attr) {\u000a  var reduceAddAvg, reduceInitAvg, reduceRemoveAvg;\u000a  reduceAddAvg = function(attr) {\u000a    return function(p, v) {\u000a      ++p.count;\u000a      p.sum += +v[attr];\u000a      p.avg = checkAvg(p);\u000a      return p;\u000a    };\u000a  };\u000a  reduceRemoveAvg = function(attr) {\u000a    return function(p, v) {\u000a      --p.count;\u000a      p.sum -= +v[attr];\u000a      p.avg = checkAvg(p);\u000a      return p;\u000a    };\u000a  };\u000a  reduceInitAvg = function() {\u000a    return {\u000a      count: 0,\u000a      sum: 0,\u000a      avg: 0\u000a    };\u000a  };\u000a  return dim.group().reduce(reduceAddAvg(attr), reduceRemoveAvg(attr), reduceInitAvg);\u000a};\u000a\u000aorderByAvg = function(p) {\u000a  return p.avg;\u000a};\u000a\u000adeltaPrcnts = function(dim, attr) {\u000a  var reduceAddAvg, reduceInitAvg, reduceRemoveAvg;\u000a  reduceAddAvg = function(attr) {\u000a    return function(p, v) {\u000a      ++p.count;\u000a      p.sum += +v[attr];\u000a      p.avg = checkAvg(p);\u000a      p.deltaPercnt = (p.avg / v[attr + "_avg"]) / v[attr + "_avg"] * 100;\u000a      return p;\u000a    };\u000a  };\u000a  reduceRemoveAvg = function(attr) {\u000a    return function(p, v) {\u000a      --p.count;\u000a      p.sum += +v[attr];\u000a      p.avg = checkAvg(p);\u000a      p.deltaPercnt = (p.avg / v[attr + "_avg"]) / v[attr + "_avg"] * 100;\u000a      return p;\u000a    };\u000a  };\u000a  reduceInitAvg = function() {\u000a    return {\u000a      count: 0,\u000a      sum: 0,\u000a      avg: 0,\u000a      deltaPercnt: 0\u000a    };\u000a  };\u000a  return dim.group().reduce(reduceAddAvg(attr), reduceRemoveAvg(attr), reduceInitAvg);\u000a};\u000a\u000acheckAvg = function(p) {\u000a  if (p.sum < 0.0000001) {\u000a    p.avg = 0;\u000a  } else {\u000a    p.avg = p.sum / p.count;\u000a  }\u000a  return p.avg;\u000a};\u000a\u000aactivateListeners = function() {\u000a  return $("#timeSeries .buttons").on("click", "button", function() {\u000a    var displayName, metricName;\u000a    metricName = $(this).attr("data-name");\u000a    displayName = $(this).html();\u000a    buildCharts(metricName, displayName);\u000a    dc.filterAll();\u000a    return dc.renderAll();\u000a  });\u000a};\u000a\u000aDashboard = (function() {\u000a  function Dashboard() {\u000a    this.metricName = "Temp";\u000a    this.displayName = "Temperature (F)";\u000a    this.cf = null;\u000a    this.allGroups = null;\u000a    this.charts = [];\u000a    this.dimension = {};\u000a    this.cal = null;\u000a    this.monthAvgs = null;\u000a    this.avgMonthOverTime = null;\u000a    this.yearAvgs = null;\u000a    this.hourAvgs = null;\u000a  }\u000a\u000a  Dashboard.prototype.parseData = function(data) {\u000a    var d, _i, _len;\u000a    this.cf = crossfilter(data);\u000a    console.log(this.cf);\u000a    this.allGroups = this.cf.groupAll();\u000a    for (_i = 0, _len = data.length; _i < _len; _i++) {\u000a      d = data[_i];\u000a      d.Date = parseDate(d.Date);\u000a      d.monthNum = d.Date.getMonth();\u000a      d.hourlyNum = d.Date.getHours();\u000a      d.Year = d.Date.getFullYear();\u000a      d.monthStamp = d3.time.month(d.Date);\u000a      d.dayStamp = d3.time.day(d.Date);\u000a    }\u000a    this.buildDimensions();\u000a    this.buildMetrics();\u000a    this.buildCharts();\u000a    return this.activateListeners();\u000a  };\u000a\u000a  Dashboard.prototype.buildDimensions = function() {\u000a    this.dimension.yearName = this.cf.dimension(function(d) {\u000a      return d.Year;\u000a    });\u000a    this.dimension.timeOfDay = this.cf.dimension(function(d) {\u000a      return d.hourlyNum;\u000a    });\u000a    this.dimension.monthStamp = this.cf.dimension(function(d) {\u000a      return d.monthStamp;\u000a    });\u000a    this.dimension.dayStamp = this.cf.dimension(function(d) {\u000a      return d.dayStamp;\u000a    });\u000a    return this.dimension.monthNames = this.cf.dimension(function(d) {\u000a      var month, name;\u000a      month = d.monthNum;\u000a      name = ["Jan", "Feb", "Mar", "Apr", "May", "June", "July", "Aug", "Sept", "Oct", "Nov", "Dec"];\u000a      return name[month];\u000a    });\u000a  };\u000a\u000a  Dashboard.prototype.buildMetrics = function() {\u000a    this.avgMonthOverTime = averageValues(this.dimension.monthStamp, this.metricName);\u000a    this.yearAvgs = averageValues(this.dimension.yearName, this.metricName);\u000a    this.hourAvgs = averageValues(this.dimension.timeOfDay, this.metricName);\u000a    this.monthAvgs = averageValues(this.dimension.monthNames, this.metricName);\u000a    return this.avgDayOverTime = averageValues(this.dimension.dayStamp, this.metricName);\u000a  };\u000a\u000a  Dashboard.prototype.buildCharts = function() {\u000a    this.charts.push(monthChart(this.dimension.monthNames, this.metricName, this.displayName, this.monthAvgs));\u000a    this.charts.push(yearChart(this.dimension.yearName, this.metricName, this.displayName, this.yearAvgs));\u000a    this.charts.push(hourChart(this.dimension.timeOfDay, this.metricName, this.displayName, this.hourAvgs));\u000a    timeChart = timeSeries(this.dimension.monthStamp, this.metricName, this.displayName, this.avgMonthOverTime);\u000a    this.charts.push(timeChart);\u000a    return timeChart.on("postRender", function() {\u000a      return db.loadCalendar();\u000a    });\u000a  };\u000a\u000a  Dashboard.prototype.refreshCharts = function() {\u000a    var _i, _len, _ref;\u000a    dc.filterAll();\u000a    _ref = this.charts;\u000a    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\u000a      chart = _ref[_i];\u000a      chart.expireCache();\u000a    }\u000a    this.charts = [];\u000a    this.buildMetrics();\u000a    this.buildCharts();\u000a    return dc.renderAll();\u000a  };\u000a\u000a  Dashboard.prototype.activateListeners = function() {\u000a    var go;\u000a    go = this;\u000a    return $("#timeSeries .buttons").on("click", "button", function() {\u000a      this.metricName = $(this).attr("data-name");\u000a      this.displayName = $(this).html();\u000a      return go.refreshCharts(metricName, displayName);\u000a    });\u000a  };\u000a\u000a  Dashboard.prototype.loadCalendar = function() {\u000a    var calFormattedJson, object, _i, _len, _ref;\u000a    $("#cal-heatmap").children().remove();\u000a    cal = new CalHeatMap();\u000a    calFormattedJson = {};\u000a    _ref = this.avgDayOverTime.all();\u000a    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\u000a      object = _ref[_i];\u000a      calFormattedJson[String(object.key.getTime()).slice(0, -3)] = Math.round(object.value.avg);\u000a    }\u000a    cal.init({\u000a      domain: "month",\u000a      subDomain: "x_day",\u000a      start: new Date(2009, 3, 15),\u000a      range: 12 * 5,\u000a      legend: [30, 45, 70, 80],\u000a      cellSize: 12\u000a    });\u000a    return cal.update(calFormattedJson);\u000a  };\u000a\u000a  return Dashboard;\u000a\u000a})();\u000a\u000aChart = (function() {\u000a  function Chart(anchor, dim, metricFunction, metricName) {\u000a    this.anchor = anchor;\u000a    this.dim = dim;\u000a    this.metricFunction = metricFunction;\u000a    this.metricName = metricName;\u000a    console.log("chart class");\u000a    this.chartObject = null;\u000a  }\u000a\u000a  Chart.prototype.line = function() {};\u000a\u000a  Chart.prototype.bar = function() {\u000a    var metric;\u000a    this.chartObject = dc.barChart(this.anchor);\u000a    metric = this.metricFunction(this.dim, this.metricName);\u000a    return this.chartObject.width(800).height(300).dimension(this.dim).group(metric).x(d3.scale.ordinal().domain(["", "Fall", "Winter", "Spring", "Summer"])).xUnits(dc.units.ordinal).valueAccessor(function(d) {\u000a      return d.value.avg;\u000a    }).centerBar(true).renderHorizontalGridLines(true);\u000a  };\u000a\u000a  Chart.prototype.composite = function() {};\u000a\u000a  return Chart;\u000a\u000a})();\u000a
p1
.