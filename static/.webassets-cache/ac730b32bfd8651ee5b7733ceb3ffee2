Vvar Chart, Dashboard, activateListeners, all, averageValues, avgTempByMonth, chart, dataSlice, dateDim, dayOfWeek, db, monthDim, ndx, orderByAvg, parseDate, seasonChart, seasonDim, seasonsChart, timeChart, timeSeries;\u000a\u000andx = null;\u000a\u000aall = null;\u000a\u000adateDim = null;\u000a\u000adayOfWeek = null;\u000a\u000aavgTempByMonth = null;\u000a\u000adataSlice = null;\u000a\u000achart = null;\u000a\u000amonthDim = null;\u000a\u000aseasonDim = null;\u000a\u000atimeChart = null;\u000a\u000aseasonChart = null;\u000a\u000aall = null;\u000a\u000adb = null;\u000a\u000a(function($) {})(jQuery);\u000a\u000aparseDate = d3.time.format("%Y-%m-%d %H:%M:%S").parse;\u000a\u000ad3.csv("static/aggedWeather.csv", function(data) {\u000a  db = new Dashboard().parseData(data);\u000a  return dc.renderAll();\u000a});\u000a\u000atimeSeries = function(weatherMetric, displayName) {\u000a  var dim, maxDate, metric, metric_avg, minDate;\u000a  timeChart = dc.compositeChart("#timeSeries .chart");\u000a  dim = monthDim;\u000a  metric = averageValues(dim, weatherMetric);\u000a  metric_avg = averageValues(dim, weatherMetric + "_avg");\u000a  minDate = dim.bottom(1)[0].Date;\u000a  maxDate = dim.top(1)[0].Date;\u000a  timeChart.width(870).height(380).dimension(dim).renderHorizontalGridLines(true).x(d3.time.scale().domain([minDate, maxDate])).brushOn(true).legend(dc.legend().x(60).y(10).itemHeight(13).gap(5)).yAxisLabel(displayName).compose([\u000a    dc.lineChart(timeChart).colors(['red']).group(metric, displayName).valueAccessor(function(d) {\u000a      return d.value.avg;\u000a    }).interpolate('basis-open').dimension(dim), dc.lineChart(timeChart).dimension(dim).colors(['blue']).group(metric_avg, displayName + " Average").valueAccessor(function(d) {\u000a      return d.value.avg;\u000a    }).interpolate('basis-open')\u000a  ]).margins({\u000a    top: 10,\u000a    left: 40,\u000a    right: 10,\u000a    bottom: 50\u000a  });\u000a  return timeChart;\u000a};\u000a\u000aseasonsChart = function(weatherMetric, displayName) {\u000a  var dim, metric;\u000a  seasonChart = dc.barChart("#seasonsChart");\u000a  dim = seasonDim;\u000a  metric = averageValues(dim, weatherMetric);\u000a  return seasonChart.width(800).height(300).dimension(dim).group(metric).x(d3.scale.ordinal().domain(["Fall", "Winter", "Spring", "Summer"])).xUnits(dc.units.ordinal).valueAccessor(function(d) {\u000a    return d.value.avg;\u000a  }).centerBar(true).renderHorizontalGridLines(true);\u000a};\u000a\u000aaverageValues = function(dim, attr) {\u000a  var reduceAddAvg, reduceInitAvg, reduceRemoveAvg;\u000a  reduceAddAvg = function(attr) {\u000a    return function(p, v) {\u000a      ++p.count;\u000a      p.sum += +v[attr];\u000a      if (p.sum < 0.0000001) {\u000a        p.avg = 0;\u000a      } else {\u000a        p.avg = p.sum / p.count;\u000a      }\u000a      return p;\u000a    };\u000a  };\u000a  reduceRemoveAvg = function(attr) {\u000a    return function(p, v) {\u000a      --p.count;\u000a      p.sum -= +v[attr];\u000a      if (p.sum < 0.0000001) {\u000a        p.avg = 0;\u000a      } else {\u000a        p.avg = p.sum / p.count;\u000a      }\u000a      return p;\u000a    };\u000a  };\u000a  reduceInitAvg = function() {\u000a    return {\u000a      count: 0,\u000a      sum: 0,\u000a      avg: 0\u000a    };\u000a  };\u000a  return dim.group().reduce(reduceAddAvg(attr), reduceRemoveAvg(attr), reduceInitAvg);\u000a};\u000a\u000aorderByAvg = function(p) {\u000a  return p.avg;\u000a};\u000a\u000aactivateListeners = function() {\u000a  return $("#timeSeries .buttons").on("click", "button", function() {\u000a    var displayName, metricName;\u000a    metricName = $(this).attr("data-name");\u000a    displayName = $(this).html();\u000a    buildCharts(metricName, displayName);\u000a    dc.filterAll();\u000a    return dc.renderAll();\u000a  });\u000a};\u000a\u000aDashboard = (function() {\u000a  function Dashboard() {\u000a    this.cf = null;\u000a    this.allGroups = null;\u000a  }\u000a\u000a  return Dashboard;\u000a\u000a})();\u000a\u000a({\u000a  parseData: function(data) {\u000a    var d, test, _i, _j, _len, _len1, _ref, _ref1;\u000a    this.data = data;\u000a    this.cf = crossfilter(this.data);\u000a    console.log(this.cf);\u000a    this.allGroups = this.cf.groupAll();\u000a    this.charts = [];\u000a    this.dimension = {};\u000a    this.defaultMetric = "Temp";\u000a    _ref = ["one", "two"];\u000a    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\u000a      test = _ref[_i];\u000a      console.log(test);\u000a    }\u000a    _ref1 = this.data;\u000a    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {\u000a      d = _ref1[_j];\u000a      console.log(d);\u000a      d.Date = parseDate(d.Date);\u000a      d.monthNum = d.Date.getMonth();\u000a      d.Year = d.Date.getFullYear();\u000a      d.monthStamp = d3.time.month(d.Date);\u000a      d.dayStamp = d3.time.day(d.Date);\u000a      d.weekStamp = d3.time.week(d.Date);\u000a      this.buildDimensions(d);\u000a    }\u000a    this.buildCharts()({\u000a      buildDimensions: function(d) {}\u000a    });\u000a    this.dimension.yearName = cf.dimension(function(d) {\u000a      return d.Year;\u000a    });\u000a    this.dimension.seasons = cf.dimension(function(d) {\u000a      var month;\u000a      month = d.monthNum;\u000a      if (month === 11 || month === 0 || month === 1) {\u000a        return "Winter";\u000a      } else if (month >= 2 && month <= 4) {\u000a        return "Spring";\u000a      } else if (month >= 5 && month <= 7) {\u000a        return "Summer";\u000a      } else {\u000a        return "Fall";\u000a      }\u000a    });\u000a    this.dimension.monthStamp = cf.dimension(function(d) {\u000a      return d.monthStamp;\u000a    });\u000a    this.dimension.dayStamp = cf.dimension(function(d) {\u000a      return d.dayStamp;\u000a    });\u000a    this.dimension.dayNames = cf.dimension(function(d) {\u000a      var day, name;\u000a      day = d.Weekday;\u000a      name = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];\u000a      return day + "." + name[day];\u000a    });\u000a    this.dimension.monthNames = cf.dimension(function(d) {\u000a      var month, name;\u000a      month = d.monthNum;\u000a      name = ["Jan", "Feb", "Mar", "Apr", "May", "June", "July", "Aug", "Sept", "Oct", "Nov", "Dec"];\u000a      return month + "." + name[month];\u000a    });\u000a    ({\u000a      buildCharts: function() {\u000a        return console.log("in buildcharts");\u000a      }\u000a    });\u000a    return this.charts.push(new Chart("#seasonsChart", this.dimension.seasons, averageValues, defaultMetric).bar());\u000a  }\u000a});\u000a\u000aChart = (function() {\u000a  function Chart(anchor, dim, metricFunction, metricName) {\u000a    this.anchor = anchor;\u000a    this.dim = dim;\u000a    this.metricFunction = metricFunction;\u000a    this.metricName = metricName;\u000a  }\u000a\u000a  return Chart;\u000a\u000a})();\u000a\u000aconsole.log("chart class");\u000a\u000athis.chartObject = null;\u000a\u000a({\u000a  line: function() {},\u000a  bar: function() {\u000a    var metric;\u000a    this.chartObject = dc.barChart(this.anchor);\u000a    metric = this.metricFunction(this.dim, this.metricName);\u000a    return this.chartObject.width(800).height(300).dimension(dim).group(metric).x(d3.scale.ordinal().domain(["Fall", "Winter", "Spring", "Summer"])).xUnits(dc.units.ordinal).valueAccessor(function(d) {\u000a      console.log(d);\u000a      return d.value.avg;\u000a    }).centerBar(true).renderHorizontalGridLines(true);\u000a  },\u000a  composite: function() {}\u000a});\u000a
p1
.