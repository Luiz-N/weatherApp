Vvar Chart, Dashboard, activateListeners, all, averageValues, avgTempByMonth, buildCalendarJson, buildFakeGroup, cal, chart, checkAvg, dataSlice, dateDim, dayOfWeek, db, defaultClipsArray, getColorIndex, getDeltas, hourChart, monthChart, monthDim, monthNameDim, ndx, parseDate, precipReduceHack, seasonChart, seasonDim, startTime, t1, timeChart, timeSeries, yearChart;\u000a\u000andx = null;\u000a\u000aall = null;\u000a\u000adateDim = null;\u000a\u000adayOfWeek = null;\u000a\u000aavgTempByMonth = null;\u000a\u000adataSlice = null;\u000a\u000achart = null;\u000a\u000amonthNameDim = null;\u000a\u000amonthDim = null;\u000a\u000aseasonDim = null;\u000a\u000atimeChart = null;\u000a\u000aseasonChart = null;\u000a\u000aall = null;\u000a\u000adb = null;\u000a\u000acal = null;\u000a\u000astartTime = new Date();\u000a\u000a(function($) {})(jQuery);\u000a\u000at1 = null;\u000a\u000aparseDate = d3.time.format("%Y-%m-%d %H:%M:%S").parse;\u000a\u000ad3.csv("static/aggedWeather.csv", function(data) {\u000a  db = new Dashboard();\u000a  db.parseData(data);\u000a  dc.renderAll();\u000a  db.activateListeners();\u000a  dataSlice = data[0];\u000a  console.log(dataSlice);\u000a  return console.log((new Date() - startTime) / 1000);\u000a});\u000a\u000atimeSeries = function(dim, metricName, displayName, metric) {\u000a  var maxDate, metric_avg, minDate, width;\u000a  timeChart = dc.compositeChart("#timeSeries .chart");\u000a  metric_avg = averageValues(dim, metricName + "_avg");\u000a  minDate = dim.bottom(1)[0].Date;\u000a  maxDate = dim.top(1)[0].Date;\u000a  width = $(timeChart.root()[0]).innerWidth() + 30;\u000a  timeChart.width(width).height(width * .333).dimension(dim).renderHorizontalGridLines(true).x(d3.time.scale().domain([minDate, maxDate])).xUnits(d3.time.months).elasticY(true).brushOn(true).legend(dc.legend().x(60).y(10).itemHeight(13).gap(5)).yAxisLabel(displayName).compose([\u000a    dc.lineChart(timeChart).colors(['blue']).group(metric, "actual" + displayName).valueAccessor(function(d) {\u000a      return d.value.avg;\u000a    }).interpolate('basis-open').dimension(dim), dc.lineChart(timeChart).colors(['red']).group(metric, "Normal " + displayName).valueAccessor(function(d) {\u000a      return d.value.avg_avg;\u000a    }).interpolate('basis-open')\u000a  ]);\u000a  return timeChart;\u000a};\u000a\u000amonthChart = function(dim, metricName, displayName, metric) {\u000a  var actualTemp, avgTemp, mainChart, monthArray, width;\u000a  mainChart = dc.compositeChart("#monthChart");\u000a  width = $(mainChart.root()[0]).outerWidth() + 100;\u000a  monthArray = ["Jan", "Feb", "Mar", "Apr", "May", "June", "July", "Aug", "Sept", "Oct", "Nov", "Dec"];\u000a  actualTemp = dc.barChart(mainChart);\u000a  avgTemp = dc.barChart(mainChart);\u000a  actualTemp.group(metric).valueAccessor(function(d) {\u000a    return d.value.avg;\u000a  }).colors(['lightblue', 'blue', 'green']).colorAccessor(function(d, i) {\u000a    if (d.y > 50) {\u000a      return 2;\u000a    } else {\u000a      return 0;\u000a    }\u000a  }).colorDomain([0, 2]);\u000a  avgTemp.group(metric).valueAccessor(function(d) {\u000a    return d.value.avg_avg;\u000a  }).colors(['red']);\u000a  mainChart.width(width).height(width * .4).dimension(dim).group(metric).elasticY(false).yAxisLabel(displayName).title(function(d) {\u000a    return "Title";\u000a  }).renderTitle(true).x(d3.scale.ordinal().domain(monthArray)).xUnits(dc.units.ordinal).renderHorizontalGridLines(true).compose([actualTemp, avgTemp]);\u000a  return mainChart;\u000a};\u000a\u000ayearChart = function(dim, metricName, displayName, metric) {\u000a  var actualTemp, avgTemp, mainChart, width;\u000a  mainChart = dc.compositeChart("#yearChart");\u000a  width = $(mainChart.root()[0]).outerWidth() + 100;\u000a  actualTemp = dc.barChart(mainChart);\u000a  avgTemp = dc.barChart(mainChart);\u000a  actualTemp.group(metric).valueAccessor(function(d) {\u000a    return d.value.avg;\u000a  }).colors(['rgb(215,48,39)', 'rgb(252,141,89)', 'rgb(254,224,144)', 'rgb(255,255,191)', 'rgb(224,243,248)', 'rgb(145,191,219)', 'rgb(69,117,180)']).colorAccessor(function(d, i) {\u000a    var diff, norm;\u000a    norm = d.data.value.avg_avg;\u000a    diff = (d.y - norm) / norm;\u000a    return getColorIndex(diff);\u000a  }).colorDomain([0, 6]);\u000a  avgTemp.group(metric).valueAccessor(function(d) {\u000a    return d.value.avg_avg;\u000a  }).colors(['rgba(255,255,191,0)']);\u000a  mainChart.width(width).height(width * .4).dimension(dim).group(metric).elasticY(true).yAxisLabel(displayName).title(function(d) {\u000a    return "Title";\u000a  }).renderTitle(true).x(d3.scale.ordinal()).xUnits(dc.units.ordinal).renderHorizontalGridLines(true).compose([actualTemp, avgTemp]);\u000a  return mainChart;\u000a};\u000a\u000ahourChart = function(dim, metricName, displayName, metric) {\u000a  var chartObject, width;\u000a  chartObject = dc.barChart("#hourChart");\u000a  width = $(chartObject.root()[0]).outerWidth() + 100;\u000a  chartObject.width(width).height(width * .4).dimension(dim).group(metric).elasticY(true).yAxisLabel(displayName).brushOn(true).round(dc.round.floor).x(d3.scale.ordinal()).xUnits(dc.units.ordinal).valueAccessor(function(d) {\u000a    return d.value.avg;\u000a  }).centerBar(false).renderHorizontalGridLines(true);\u000a  return chartObject;\u000a};\u000a\u000aaverageValues = function(dim, attr) {\u000a  var reduceAddAvg, reduceInitAvg, reduceRemoveAvg;\u000a  reduceAddAvg = function(attr) {\u000a    return function(p, v) {\u000a      ++p.count;\u000a      p.sum += +v[attr];\u000a      p.avg_sum += +v[attr + "_avg"];\u000a      p.avg_avg = checkAvg(p, p.avg_sum);\u000a      p.avg = checkAvg(p, p.sum);\u000a      return p;\u000a    };\u000a  };\u000a  reduceRemoveAvg = function(attr) {\u000a    return function(p, v) {\u000a      --p.count;\u000a      p.sum -= +v[attr];\u000a      p.avg_sum -= +v[attr + "_avg"];\u000a      p.avg_avg = checkAvg(p, p.avg_sum);\u000a      p.avg = checkAvg(p, p.sum);\u000a      return p;\u000a    };\u000a  };\u000a  reduceInitAvg = function() {\u000a    return {\u000a      count: 0,\u000a      sum: 0,\u000a      avg: 0,\u000a      avg_sum: 0,\u000a      avg_avg: 0\u000a    };\u000a  };\u000a  return dim.group().reduce(reduceAddAvg(attr), reduceRemoveAvg(attr), reduceInitAvg);\u000a};\u000a\u000aprecipReduceHack = function(dim, attr) {\u000a  var reduceAddAvg, reduceInitAvg, reduceRemoveAvg;\u000a  reduceAddAvg = function(attr) {\u000a    return function(p, v) {\u000a      ++p.count;\u000a      p.avg += +v[attr];\u000a      p.avg_avg += +v[attr + "_avg"];\u000a      return p;\u000a    };\u000a  };\u000a  reduceRemoveAvg = function(attr) {\u000a    return function(p, v) {\u000a      --p.count;\u000a      p.avg -= +v[attr];\u000a      p.avg_avg -= +v[attr + "_avg"];\u000a      return p;\u000a    };\u000a  };\u000a  reduceInitAvg = function() {\u000a    return {\u000a      avg: 0,\u000a      avg_avg: 0\u000a    };\u000a  };\u000a  return dim.group().reduce(reduceAddAvg(attr), reduceRemoveAvg(attr), reduceInitAvg);\u000a};\u000a\u000agetDeltas = function(dim, attr) {\u000a  var reduceAddAvg, reduceInitAvg, reduceRemoveAvg;\u000a  reduceAddAvg = function(attr) {\u000a    return function(p, v) {\u000a      ++p.count;\u000a      p.sum += +(+v[attr]).toFixed(4);\u000a      p.avg = checkAvg(p, p.sum);\u000a      p.delta = +((p.avg - v[attr + "_avg"]) / v[attr + "_avg"] * 100).toFixed(4);\u000a      return p;\u000a    };\u000a  };\u000a  reduceRemoveAvg = function(attr) {\u000a    return function(p, v) {\u000a      --p.count;\u000a      p.sum -= +(+v[attr]).toFixed(4);\u000a      p.avg = checkAvg(p, p.sum);\u000a      p.delta = +((p.avg - v[attr + "_avg"]) / v[attr + "_avg"] * 100).toFixed();\u000a      if (p.delta % 1 === 0) {\u000a        p.delta = 0;\u000a      }\u000a      return p;\u000a    };\u000a  };\u000a  reduceInitAvg = function() {\u000a    return {\u000a      count: 0,\u000a      sum: 0,\u000a      avg: 0,\u000a      delta: 0\u000a    };\u000a  };\u000a  return dim.group().reduce(reduceAddAvg(attr), reduceRemoveAvg(attr), reduceInitAvg);\u000a};\u000a\u000acheckAvg = function(p, sum) {\u000a  if (sum < 0.0000001) {\u000a    p.avg = 0;\u000a  } else {\u000a    p.avg = sum / p.count;\u000a  }\u000a  return p.avg;\u000a};\u000a\u000abuildCalendarJson = function(metricArray) {\u000a  var calFormattedJson, object, _i, _len;\u000a  calFormattedJson = {};\u000a  for (_i = 0, _len = metricArray.length; _i < _len; _i++) {\u000a    object = metricArray[_i];\u000a    calFormattedJson[String(object.key.getTime()).slice(0, -3)] = +object.value.avg.toFixed(2);\u000a  }\u000a  return calFormattedJson;\u000a};\u000a\u000agetColorIndex = function(diff) {\u000a  var abs_diff;\u000a  abs_diff = Math.abs(diff);\u000a  if (abs_diff < .025) {\u000a    return 3;\u000a  } else if (abs_diff < .05) {\u000a    if (diff > 0) {\u000a      return 2;\u000a    } else {\u000a      return 4;\u000a    }\u000a  } else if (abs_diff < .075) {\u000a    if (diff > 0) {\u000a      return 1;\u000a    } else {\u000a      return 5;\u000a    }\u000a  } else {\u000a    if (diff > 0) {\u000a      0;\u000a    }\u000a    return 6;\u000a  }\u000a};\u000a\u000adefaultClipsArray = [\u000a  {\u000a    'key': '2009-01',\u000a    'value': 0\u000a  }, {\u000a    'key': '2009-06',\u000a    'value': 0\u000a  }, {\u000a    'key': '2009-07',\u000a    'value': 511\u000a  }, {\u000a    'key': '2009-08',\u000a    'value': 579\u000a  }, {\u000a    'key': '2009-09',\u000a    'value': 698\u000a  }, {\u000a    'key': '2009-10',\u000a    'value': 476\u000a  }, {\u000a    'key': '2009-11',\u000a    'value': 767\u000a  }, {\u000a    'key': '2009-12',\u000a    'value': 593\u000a  }, {\u000a    'key': '2010-01',\u000a    'value': 494\u000a  }, {\u000a    'key': '2010-02',\u000a    'value': 346\u000a  }, {\u000a    'key': '2010-03',\u000a    'value': 891\u000a  }, {\u000a    'key': '2010-04',\u000a    'value': 514\u000a  }, {\u000a    'key': '2010-05',\u000a    'value': 517\u000a  }, {\u000a    'key': '2010-06',\u000a    'value': 642\u000a  }, {\u000a    'key': '2010-07',\u000a    'value': 818\u000a  }, {\u000a    'key': '2010-08',\u000a    'value': 1009\u000a  }, {\u000a    'key': '2010-09',\u000a    'value': 839\u000a  }, {\u000a    'key': '2010-10',\u000a    'value': 342\u000a  }, {\u000a    'key': '2010-11',\u000a    'value': 558\u000a  }, {\u000a    'key': '2010-12',\u000a    'value': 592\u000a  }, {\u000a    'key': '2011-01',\u000a    'value': 499\u000a  }, {\u000a    'key': '2011-02',\u000a    'value': 393\u000a  }, {\u000a    'key': '2011-03',\u000a    'value': 638\u000a  }, {\u000a    'key': '2011-04',\u000a    'value': 1057\u000a  }, {\u000a    'key': '2011-05',\u000a    'value': 1097\u000a  }, {\u000a    'key': '2011-06',\u000a    'value': 697\u000a  }, {\u000a    'key': '2011-07',\u000a    'value': 533\u000a  }, {\u000a    'key': '2011-08',\u000a    'value': 1518\u000a  }, {\u000a    'key': '2011-09',\u000a    'value': 908\u000a  }, {\u000a    'key': '2011-10',\u000a    'value': 401\u000a  }, {\u000a    'key': '2011-11',\u000a    'value': 358\u000a  }, {\u000a    'key': '2011-12',\u000a    'value': 429\u000a  }, {\u000a    'key': '2012-01',\u000a    'value': 368\u000a  }, {\u000a    'key': '2012-02',\u000a    'value': 240\u000a  }, {\u000a    'key': '2012-03',\u000a    'value': 372\u000a  }, {\u000a    'key': '2012-04',\u000a    'value': 385\u000a  }, {\u000a    'key': '2012-05',\u000a    'value': 547\u000a  }, {\u000a    'key': '2012-06',\u000a    'value': 567\u000a  }, {\u000a    'key': '2012-07',\u000a    'value': 678\u000a  }, {\u000a    'key': '2012-08',\u000a    'value': 1042\u000a  }, {\u000a    'key': '2012-09',\u000a    'value': 281\u000a  }, {\u000a    'key': '2012-10',\u000a    'value': 621\u000a  }, {\u000a    'key': '2012-11',\u000a    'value': 320\u000a  }, {\u000a    'key': '2012-12',\u000a    'value': 201\u000a  }, {\u000a    'key': '2013-01',\u000a    'value': 325\u000a  }, {\u000a    'key': '2013-02',\u000a    'value': 303\u000a  }, {\u000a    'key': '2013-03',\u000a    'value': 0\u000a  }, {\u000a    'key': '2013-04',\u000a    'value': 53\u000a  }, {\u000a    'key': '2013-05',\u000a    'value': 167\u000a  }, {\u000a    'key': '2013-06',\u000a    'value': 90\u000a  }, {\u000a    'key': '2013-07',\u000a    'value': 58\u000a  }, {\u000a    'key': '2013-08',\u000a    'value': 180\u000a  }, {\u000a    'key': '2013-09',\u000a    'value': 306\u000a  }, {\u000a    'key': '2013-10',\u000a    'value': 193\u000a  }, {\u000a    'key': '2013-11',\u000a    'value': 53\u000a  }, {\u000a    'key': '2013-12',\u000a    'value': 75\u000a  }, {\u000a    'key': '2014-01',\u000a    'value': 39\u000a  }, {\u000a    'key': '2014-02',\u000a    'value': 87\u000a  }, {\u000a    'key': '2014-03',\u000a    'value': 33\u000a  }, {\u000a    'key': '2014-04',\u000a    'value': 0\u000a  }, {\u000a    'key': '2014-05',\u000a    'value': 0\u000a  }, {\u000a    'key': '2014-06',\u000a    'value': 0\u000a  }, {\u000a    'key': '2014-07',\u000a    'value': 90\u000a  }\u000a];\u000a\u000abuildFakeGroup = function(array) {\u000a  var g, monthStamp, obj, _i, _len;\u000a  g = [];\u000a  for (_i = 0, _len = array.length; _i < _len; _i++) {\u000a    obj = array[_i];\u000a    monthStamp = d3.time.format("%Y-%m").parse(obj['key']);\u000a    g.push({\u000a      key: monthStamp,\u000a      value: obj['value']\u000a    });\u000a  }\u000a  return {\u000a    all: function() {\u000a      return g;\u000a    }\u000a  };\u000a};\u000a\u000aactivateListeners = function() {\u000a  return $("#timeSeries .buttons").on("click", "button", function() {\u000a    var displayName, metricName;\u000a    metricName = $(this).attr("data-name");\u000a    displayName = $(this).html();\u000a    buildCharts(metricName, displayName);\u000a    dc.filterAll();\u000a    return dc.renderAll();\u000a  });\u000a};\u000a\u000aDashboard = (function() {\u000a  function Dashboard() {\u000a    this.metricArray = ["H_Pcnt"];\u000a    this.metricName = "Temp";\u000a    this.displayName = "Temperature (F)";\u000a    this.queries = [];\u000a    this.inputBox = null;\u000a    this.cf = null;\u000a    this.allGroups = null;\u000a    this.charts = {};\u000a    this.dimension = {};\u000a    this.metric = {};\u000a    this.cal = null;\u000a    this.monthArray = ["Jan", "Feb", "Mar", "Apr", "May", "June", "July", "Aug", "Sept", "Oct", "Nov", "Dec"];\u000a    this.timeSpan = null;\u000a  }\u000a\u000a  Dashboard.prototype.parseData = function(data) {\u000a    var d, _i, _len;\u000a    this.cf = crossfilter(data);\u000a    this.allGroups = this.cf.groupAll();\u000a    for (_i = 0, _len = data.length; _i < _len; _i++) {\u000a      d = data[_i];\u000a      d.Date = parseDate(d.Date);\u000a      d.monthNum = d.Date.getMonth();\u000a      d.hourlyNum = d.Date.getHours();\u000a      d.Year = d.Date.getFullYear();\u000a      d.monthStamp = d3.time.month(d.Date);\u000a      d.dayStamp = d3.time.day(d.Date);\u000a    }\u000a    this.buildDimensions();\u000a    this.buildMonthChart();\u000a    this.buildTimeSeriesChart();\u000a    return this.loadCalendar();\u000a  };\u000a\u000a  Dashboard.prototype.buildDimensions = function() {\u000a    var go;\u000a    go = this;\u000a    this.dimension.monthStamp = this.cf.dimension(function(d) {\u000a      return d.monthStamp;\u000a    });\u000a    this.dimension.dayStamp = this.cf.dimension(function(d) {\u000a      return d.dayStamp;\u000a    });\u000a    return this.dimension.monthNames = this.cf.dimension(function(d) {\u000a      var month;\u000a      month = d.monthNum;\u000a      return go.monthArray[month];\u000a    });\u000a  };\u000a\u000a  Dashboard.prototype.buildMetrics = function() {\u000a    this.metric.avgMonthOverTime = averageValues(this.dimension.monthStamp, this.metricName);\u000a    this.metric.monthAvgs = averageValues(this.dimension.monthNames, this.metricName);\u000a    return this.metric.avgDayOverTime = averageValues(this.dimension.dayStamp, this.metricName);\u000a  };\u000a\u000a  Dashboard.prototype.buildMonthChart = function() {\u000a    var actualValuesChart, go, metric, thisChart;\u000a    go = this;\u000a    thisChart = new Chart(dc.compositeChart("#monthChart"), this.dimension.monthNames);\u000a    metric = thisChart.averageMetric(this.metricName);\u000a    actualValuesChart = dc.barChart(thisChart.chartObject);\u000a    actualValuesChart.group(metric).valueAccessor(function(d) {\u000a      return d.value.avg;\u000a    });\u000a    thisChart.chartObject.dimension(this.dimension.monthNames).width(thisChart.width + 100).height(thisChart.width * .25).yAxisLabel(this.displayName).elasticY(true).x(d3.scale.ordinal().domain(this.monthArray)).xUnits(dc.units.ordinal).renderHorizontalGridLines(true).compose([actualValuesChart]).renderlet(function() {\u000a      return dc.events.trigger(function() {\u000a        return go.loadCalendar();\u000a      });\u000a    });\u000a    thisChart.innerChart.values = actualValuesChart;\u000a    return this.charts.monthChart = thisChart;\u000a  };\u000a\u000a  Dashboard.prototype.buildYearChart = function() {\u000a    var actualValuesChart, metric, thisChart;\u000a    thisChart = new Chart(dc.compositeChart("#yearChart"), this.dimension.yearName);\u000a    metric = thisChart.averageMetric(this.metricName);\u000a    actualValuesChart = dc.barChart(thisChart.chartObject);\u000a    actualValuesChart.group(metric).valueAccessor(function(d) {\u000a      return d.value.avg;\u000a    });\u000a    thisChart.chartObject.dimension(this.dimension.yearName).width(thisChart.width + 100).height(thisChart.width * .4).yAxisLabel(this.displayName).elasticY(true).group(metric).x(d3.scale.ordinal()).xUnits(dc.units.ordinal).renderHorizontalGridLines(true).compose([actualValuesChart]);\u000a    thisChart.innerChart.values = actualValuesChart;\u000a    return this.charts.yearChart = thisChart;\u000a  };\u000a\u000a  Dashboard.prototype.buildHourlyChart = function() {\u000a    var actualValuesChart, metric, thisChart;\u000a    thisChart = new Chart(dc.compositeChart("#hourChart"), this.dimension.timeOfDay);\u000a    metric = thisChart.averageMetric(this.metricName);\u000a    actualValuesChart = dc.barChart(thisChart.chartObject);\u000a    actualValuesChart.group(metric).valueAccessor(function(d) {\u000a      return d.value.avg;\u000a    });\u000a    thisChart.chartObject.dimension(this.dimension.timeOfDay).width(thisChart.width + 100).height(thisChart.width * .4).yAxisLabel(this.displayName).elasticY(true).group(metric).x(d3.scale.ordinal()).xUnits(dc.units.ordinal).renderHorizontalGridLines(true).compose([actualValuesChart]);\u000a    thisChart.innerChart.values = actualValuesChart;\u000a    return this.charts.hourChart = thisChart;\u000a  };\u000a\u000a  Dashboard.prototype.buildTimeSeriesChart = function() {\u000a    var actualValuesChart, maxDate, metric, minDate, normValuesChart, thisChart;\u000a    thisChart = new Chart(dc.compositeChart("#timeSeries .chart"), this.dimension.monthStamp);\u000a    metric = thisChart.averageMetric(this.metricName);\u000a    minDate = this.dimension.monthStamp.bottom(1)[0].Date;\u000a    maxDate = this.dimension.monthStamp.top(1)[0].Date;\u000a    actualValuesChart = dc.lineChart(thisChart.chartObject).group(metric, "actual " + this.displayName).valueAccessor(function(d) {\u000a      return d.value.avg;\u000a    }).colors(['green']).interpolate('basis-open');\u000a    normValuesChart = dc.lineChart(thisChart.chartObject).group(metric, "normal " + this.displayName).valueAccessor(function(d) {\u000a      return d.value.avg_avg;\u000a    }).colors(['rgba(0,0,255,1)']).interpolate('basis-open');\u000a    thisChart.chartObject.dimension(this.dimension.monthStamp).width(thisChart.width + 30).height(thisChart.width * .333).yAxisLabel(this.displayName).elasticY(true).x(d3.time.scale().domain([minDate, maxDate])).xUnits(d3.time.months).brushOn(false).legend(dc.legend().x(60).y(10).itemHeight(13).gap(5)).renderHorizontalGridLines(true).compose([actualValuesChart, normValuesChart]).renderlet(function(chart) {\u000a      var height, line, width, x, xAxis, y, yAxisRight;\u000a      if (!chart.brushOn()) {\u000a        chart.brushOn(true);\u000a        chart.renderBrush(chart.g());\u000a        chart.brush().extent([d3.time.format("%Y-%m-%d").parse("2011-01-01"), d3.time.format("%Y-%m-%d").parse("2012-01-01")]);\u000a        chart.redrawBrush(chart.g());\u000a      }\u000a      height = $("#timeSeries .chart g.axis.y")[0].getBBox().height;\u000a      width = $("#timeSeries .chart g.axis.x")[0].getBBox().width;\u000a      x = d3.time.scale().range([0, width]).domain([minDate, maxDate]);\u000a      y = d3.scale.linear().range([height, 0]).domain([0, 1000]);\u000a      yAxisRight = d3.svg.axis().scale(y).orient("right").ticks(5);\u000a      xAxis = d3.svg.axis().scale(x);\u000a      chart.g().append("g").attr("class", "axis x hack").attr("transform", "translate(42," + height + ")").call(xAxis);\u000a      line = d3.svg.line().x(function(d) {\u000a        return x(d.key);\u000a      }).y(function(d) {\u000a        return x(d.value);\u000a      });\u000a      return chart.g().append("g").attr("transform", "translate(" + 100. + ",0)").attr("class", "axis y hack").call(yAxisRight);\u000a    });\u000a    thisChart.innerChart.values = actualValuesChart;\u000a    thisChart.innerChart.normalValues = normValuesChart;\u000a    return this.charts.timeSeries = thisChart;\u000a  };\u000a\u000a  Dashboard.prototype.buildCharts = function() {\u000a    var maxDate, minDate, thisChart;\u000a    thisChart = new Chart(dc.lineChart("#dlta .chart"), this.dimension.monthStamp);\u000a    minDate = this.dimension.monthStamp.bottom(1)[0].Date;\u000a    maxDate = this.dimension.monthStamp.top(1)[0].Date;\u000a    thisChart.chartObject.dimension(this.dimension.monthStamp).group(thisChart.getDelta("Temp"), "Temp").width(thisChart.width + 30).height(thisChart.width * .333).valueAccessor(function(d) {\u000a      return d.value.delta;\u000a    }).elasticY(true).x(d3.time.scale().domain([minDate, maxDate])).xUnits(d3.time.months).legend(dc.legend().x(60).y(10).itemHeight(13).gap(5)).renderHorizontalGridLines(true);\u000a    return this.charts.delta = thisChart;\u000a  };\u000a\u000a  Dashboard.prototype.refreshCharts = function() {\u000a    var chartName, go, _ref;\u000a    go = this;\u000a    dc.filterAll();\u000a    this.buildMetrics();\u000a    this.charts.timeSeries.chartObject.brushOn(false);\u000a    _ref = this.charts;\u000a    for (chartName in _ref) {\u000a      chart = _ref[chartName];\u000a      chart.chartObject.yAxisLabel(this.displayName);\u000a      chart.updateMetric(this.metricName, this.displayName);\u000a    }\u000a    return dc.renderAll();\u000a  };\u000a\u000a  Dashboard.prototype.activateListeners = function() {\u000a    var go;\u000a    go = this;\u000a    timeChart = go.charts.timeSeries.chartObject;\u000a    this.inputBox = $("#searchArea .input-group input")[0];\u000a    $("#timeSeries .buttons").on("click", "button", function() {\u000a      go.metricName = $(this).attr("data-name");\u000a      go.displayName = $(this).html();\u000a      return go.refreshCharts();\u000a    });\u000a    $("#searchArea").on("click", "button", function() {\u000a      var queryString;\u000a      queryString = go.inputBox.value;\u000a      return go.getWordCount(queryString);\u000a    });\u000a    return $(this.inputBox).keypress(function(e) {\u000a      if (e.which === 13) {\u000a        return $("#searchArea button").click();\u000a      }\u000a    });\u000a  };\u000a\u000a  Dashboard.prototype.loadCalendar = function() {\u000a    var begin, end, interval, json, max, metricValues, numOfMonths;\u000a    console.log(json);\u000a    if (this.cal) {\u000a      this.cal = this.cal.destroy();\u000a      this.cal = new CalHeatMap();\u000a    } else {\u000a      this.cal = new CalHeatMap();\u000a    }\u000a    begin = this.dimension.dayStamp.bottom(1)[0].Date;\u000a    end = this.dimension.dayStamp.top(1)[0].Date;\u000a    if (this.metricName !== "Precip") {\u000a      metricValues = averageValues(this.dimension.dayStamp, this.metricName);\u000a    } else {\u000a      metricValues = precipReduceHack(this.dimension.dayStamp, this.metricName);\u000a    }\u000a    json = buildCalendarJson(metricValues.all());\u000a    max = _.max(_.pluck(_.pluck(metricValues.all(), 'value'), 'avg_avg'));\u000a    interval = max / 10;\u000a    numOfMonths = Math.ceil(((end - begin) / 31536000000) * 12);\u000a    this.cal.init({\u000a      domain: "month",\u000a      subDomain: "x_day",\u000a      start: begin,\u000a      range: numOfMonths,\u000a      legend: [interval, 2 * interval, 3 * interval, 4 * interval, 5 * interval, 6 * interval, 7 * interval, 8 * interval, 9 * interval, max],\u000a      legendColors: ["#efefef", "coral"],\u000a      cellSize: $("#timeSeries").outerWidth() * .025,\u000a      data: json,\u000a      dataType: "json"\u000a    });\u000a    return metricValues.dispose();\u000a  };\u000a\u000a  Dashboard.prototype.updateCal = function() {\u000a    var begin, end, go, interval, json, max, metricValues, numOfMonths;\u000a    go = this;\u000a    if (this.metricName !== "Precip") {\u000a      metricValues = go.metric.avgDayOverTime;\u000a    } else {\u000a      metricValues = precipReduceHack(this.dimension.dayStamp, this.metricName);\u000a    }\u000a    json = buildCalendarJson(metricValues.all());\u000a    max = _.max(_.pluck(_.pluck(metricValues.all(), 'value'), 'avg_avg'));\u000a    interval = max / 10;\u000a    numOfMonths = Math.ceil(((end - begin) / 31536000000) * 12);\u000a    begin = this.dimension.dayStamp.bottom(1)[0].Date;\u000a    end = this.dimension.dayStamp.top(1)[0].Date;\u000a    this.cal.options.legend = [interval, 2 * interval, 3 * interval, 4 * interval, 5 * interval, 6 * interval, 7 * interval, 8 * interval, 9 * interval, max];\u000a    return this.cal.update(json);\u000a  };\u000a\u000a  Dashboard.prototype.getWordCount = function(queryString) {\u000a    var go, queryObject;\u000a    go = this;\u000a    queryObject = _.findWhere(this.queries, {\u000a      query: queryString\u000a    });\u000a    if (queryObject) {\u000a      return renderWordCountGraph(queryObject);\u000a    } else {\u000a      return $.ajax($SCRIPT_ROOT + '/newQuery', {\u000a        data: {\u000a          query: queryString\u000a        },\u000a        success: function(res, status, xhr) {\u000a          return go.renderWordCountGraph(res, status, xhr);\u000a        },\u000a        error: function(xhr, status, err) {\u000a          return console.log(err, status, xhr);\u000a        }\u000a      });\u000a    }\u000a  };\u000a\u000a  Dashboard.prototype.renderWordCountGraph = function(queryObject) {\u000a    return console.log(queryObject);\u000a  };\u000a\u000a  return Dashboard;\u000a\u000a})();\u000a\u000aChart = (function() {\u000a  function Chart(chartObject, dimension) {\u000a    this.chartObject = chartObject;\u000a    this.dimension = dimension;\u000a    this.innerChart = {};\u000a    this.width = $(this.chartObject.root()[0]).outerWidth();\u000a  }\u000a\u000a  Chart.prototype.updateMetric = function(metricName, displayName) {\u000a    var chartName, newMetric, _ref, _results;\u000a    _ref = this.innerChart;\u000a    _results = [];\u000a    for (chartName in _ref) {\u000a      chart = _ref[chartName];\u000a      newMetric = this.averageMetric(metricName);\u000a      chart.group(newMetric);\u000a      _results.push(this.chartObject.expireCache());\u000a    }\u000a    return _results;\u000a  };\u000a\u000a  Chart.prototype.averageMetric = function(metricName) {\u000a    if (metricName !== "Precip") {\u000a      return averageValues(this.dimension, metricName);\u000a    } else {\u000a      return precipReduceHack(this.dimension, metricName);\u000a    }\u000a  };\u000a\u000a  Chart.prototype.getDelta = function(metricName) {\u000a    return getDeltas(this.dimension, metricName);\u000a  };\u000a\u000a  return Chart;\u000a\u000a})();\u000a
p1
.